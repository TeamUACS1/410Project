#Contains all of the functions used in the user profile
from django.shortcuts import render
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.shortcuts import redirect
from django.db.models import Q
import urllib2
import json
from datetime import datetime
import hashlib
from main.models import Posts 
from main.models import Authors
from main.models import Friends
from main.models import Comments
from main.models import Follows

#Allows a user to post a post from the user profile page
def addPostUserProfile(request):
	context = RequestContext(request)
	session=request.session['logged_in']
	if(request.method == 'POST'):
		post2= request.POST.get("post", "")
		flag = request.POST.get("privacy", "")
		if(flag == "3"):
			private_auth = request.POST.get("private_auth", "")
			post =Posts(post=post2,author=request.session['user'],privateFlag=flag, extra=private_auth)
		else:
			post =Posts(post=post2,author=request.session['user'],privateFlag=flag)
		post.save()
	return redirect(userProfile)
	
#Allows a user to delete a post from the user profile page
def deletePostUserProfile(request):
	context = RequestContext(request)
	if(request.method == 'POST'):
		post= request.POST.get("deleteID", "")
		post =Posts(id=post)
		post.delete()
	return redirect(userProfile)

#Allows the user to delete a friend from their friend list
def removeFriend(request):
	context = RequestContext(request)
	if (request.method == 'POST'):
		friendId= request.POST.get("IDS", "")
		friendInfo = Friends(id=friendId)
		friendInfo.delete()
	return redirect(userProfile)

#Allows the user to respond to a friend request by fetching who is currently following the user
def respondToFriendRequest(request):
	context = RequestContext(request)
	if (request.method == 'POST'):
		username2 = request.session['user']
		friendshipId = request.POST.get("requestUser", "")
		guid = request.POST.get("ID", "")
		removeRequest = Friends.objects.filter(id = friendshipId).update(accepted=1)
	return render_to_response('/socialmedia/author/'+guid+'/posts',context)

#Shows the list of every user following the currently logged in user
#These users can be accepted as friends
def showFriendRequests(request):
	context = RequestContext(request)
	session = request.session['logged_in']
	user= request.session['user']
	requestList = Friends.objects.raw("select id, username1, username2, followflag from main_friends where followflag=0 and username2='" + user +"';")
	return requestList
	
#Allows the user to see his posts from the user profile page
def showpostsUserProfile(request):
	context =RequestContext(request)
	posts = Posts.objects.filter(author=request.session['user'])
	session=request.session['logged_in']
	return posts

#Shows the users that the currently logged in user is following. 
#ie people from whom the currently logged in user is awaiting a friend request response
def showUsersFollowing(request):
	context = RequestContext(request)
	session = request.session['logged_in']
	user= request.session['user']
	followingList = Friends.objects.raw("select id, username1, username2, followflag from main_friends where followflag=0 and username1='" + user +"';")
	return followingList

#This displays the current list of friends and calls the previous functions 
#to populate the data to the user profile page
def userProfile(request):
	context = RequestContext(request)
	user = request.session['user']
	
	friendList = Friends.objects.raw("select id, username1, username2, followflag from main_friends where followflag=1 and (username1='" + user +"' or username2= '"+ user +"')")
	for friend in friendList:
		if friend.username1 != user:
			friend.username2 = friend.username1;
			friend.username1 = user;
	
	followingList = showUsersFollowing(request) 
	requestList = showFriendRequests(request)
	posts = showpostsUserProfile(request)
	return render_to_response('main/userProfile.html', {'friends': friendList, 'followers': followingList, 'requests': requestList, 'posts': posts}, context)
